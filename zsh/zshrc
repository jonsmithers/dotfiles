printf ‚û°Ô∏è
ZIM_HOME="$HOME/.zim"
setopt auto_cd

# https://github.com/ohmyzsh/ohmyzsh/blob/b6bb133f230847ed0b3f9f4e25f2ceb874ca6c91/lib/history.zsh#L35C1-L40C59
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data
export LESS='-R'

# Download zimfw plugin manager if missing.
if [[ ! -e "${ZIM_HOME}/zimfw.zsh" ]]; then
  echo downloading
  curl -fsSL --create-dirs -o "${ZIM_HOME}/zimfw.zsh" \
      https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! "${ZIM_HOME}/init.zsh" -nt "${ZDOTDIR:-${HOME}}/.zimrc" ]]; then
  echo initting
  source "${ZIM_HOME}/zimfw.zsh" init -q
fi

zstyle ':zim:termtitle' hooks 'preexec' 'precmd'
zstyle ':zim:termtitle:preexec' format '${${(A)=1}[1]}'
zstyle ':zim:termtitle:precmd'  format '%1~'
stty -ixon # needed for fzf-git.sh plugin

# Initialize modules.
source "${ZIM_HOME}/init.zsh"
echo -n ü¶Ñ
# Usage: has <command>
#
# Returns 0 if the <command> is available. Returns 1 otherwise. It can be a
# binary in the PATH or a shell function.
#
# Example:
#
#    if has curl; then
#      echo "Yes we do"
#    fi
#
# Taken from https://github.com/direnv/direnv/blob/master/stdlib.sh
has() {
  type "$1" &>/dev/null
}

function silent_background() {
  # https://superuser.com/questions/1228411/silent-background-jobs-in-zsh/1285272#1285272
  setopt local_options no_notify no_monitor
  "$@" &
  disown &>/dev/null
}

[[ -d "/opt/homebrew/bin" ]] && export PATH=/opt/homebrew/bin/:$PATH
[[ -d "$HOME/.local/bin"  ]] && export PATH=$HOME/.local/bin:$PATH
[[ -d "$HOME/.npm-global" ]] && export PATH=$HOME/.npm-global/bin:$PATH
[[ -d "$HOME/.local/bin"  ]] && export PATH=$HOME/.local/bin:$PATH # "pip install --user" installs executables to this location
[[ -d "$HOME/bin"         ]] && export PATH="$HOME/bin:$PATH"

# brew autocomplete
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

setopt complete_aliases
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh
if command -v jump > /dev/null; then
  eval "$(jump shell zsh)"
fi
# clock cow
echo -n üêÇ
if has exa; then
  alias ll='exa --long --icons'
else
  alias ll='ls -alF'
fi
local vim_cmd=vim
if has nvim; then
  vim_cmd=nvim
  alias nvimdiff='nvim -d'
fi
if command -v git-number > /dev/null; then
  alias g='git number'
  if has compdef; then
    compdef g=git
  fi
  alias gim="git-number -c $vim_cmd"
  alias giff="git-number -c $vim_cmd +Gvdiff"
fi
alias gs="$vim_cmd"' +0Git "+normal gU"'
alias v="$vim_cmd"
unset vim_cmd

if [[ "$(uname)" == "Linux" ]]; then
  alias open="xdg-open"
  if ! grep -q Microsoft /proc/version; then
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
  else
    alias pbcopy='clip.exe'
    alias pbpaste='powershell.exe -command "Get-Clipboard"'
  fi
fi

if has fzf; then
  fzfCommit() {
    local FZF_PROMPT="${FZF_PROMPT:=Commit: }"
    git log --oneline | fzf --border --prompt="$FZF_PROMPT" --height=10         --preview="git show {+1} --color=always" --no-sort --reverse | cut -d' ' -f1 | tr '\n' ' ' | sed 's/[[:space:]]$//';
  }
  fzfCommits() {
    local FZF_PROMPT="${FZF_PROMPT:=Commit: }"
    git log --oneline | fzf --border --prompt="$FZF_PROMPT" --height=10 --multi --preview="git show {+1} --color=always" --no-sort --reverse | cut -d' ' -f1 | tr '\n' ' ' | sed 's/[[:space:]]$//'
  }
  fzfTags() {
    git tag | grep -v HEAD | sed "s/.* //" | sed "s#remotes/##" | sort -u | fzf --border --prompt='Tag: ' --height=30 --multi --preview="git log --format=medium --graph --max-count 10 {+1}" | tr '\n' ' ' | sed 's/[[:space:]]$//'
  }
  fzfBranches() {
    git branch --all | grep -v HEAD | sed "s/.* //" | sed "s#remotes/##" | sort -u | fzf --border --prompt='Branch: ' --height=60% --multi --preview="git log --graph --max-count=10 {+1}" | tr '\n' ' ' | sed 's/[[:space:]]$//'
  }
  insertCommits() {
    if [[ "$LBUFFER[-1]" != "!" ]]; then
      LBUFFER+='C'
      return 0
    fi
    LBUFFER="${LBUFFER[1,-2]}$(fzfCommits)"
    local ret=$?
    zle reset-prompt
    return $ret
  }
  insertTags() {
    if [[ "$LBUFFER[-1]" != "!" ]]; then
      LBUFFER+='T'
      return 0
    fi
    LBUFFER="${LBUFFER[1,-2]}$(fzfTags)"
    local ret=$?
    zle reset-prompt
    return $ret
  }
  insertBranches() {
    if [[ "$LBUFFER[-1]" != "!" ]]; then
      LBUFFER+='B'
      return 0
    fi
    LBUFFER="${LBUFFER[1,-2]}$(fzfBranches)"
    local ret=$?
    zle reset-prompt
    return $ret
  }

  zle -N insertCommits
  bindkey C insertCommits
  zle -N insertTags
  bindkey T insertTags
  zle -N insertBranches
  bindkey B insertBranches
fi

function gfixup {
  local commit=$(FZF_PROMPT='Fixup Commit: ' fzfCommit)
  if [[ -z "$commit" ]]; then
    return 1
  fi
  set -x
  git commit --fixup "$commit" --allow-empty > /dev/null || return 1
  git rebase --interactive "$commit"~ --autosquash || return 1
}

if has git-mob && has fzf; then
  function gmob() {
    local selected=$(git mob -l \
      | fzf --multi \
        --layout=reverse \
        --height=11 \
        --border=rounded \
        --prompt='ü¶ú Pair with ' \
      | awk '{print $1;}' \
      | tr '\n' ' ' \
      | sed 's/,//g' )
    [[ -n "$selected" ]] && git mob $(echo $selected)
  }
fi

if has _fzf_git_each_ref; then
  function gco() {
    local selected=$(_fzf_git_each_ref --no-multi)
    [[ -n "$selected" ]] && echo git checkout "$selected"
  }
fi

[[ -d "$HOME/.nvm" ]] && {
  export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
}

[[ -d "$HOME/.cargo" ]] && {
  export PATH=$HOME/.cargo/bin:$PATH
}
if [[ -f /proc/version ]] && grep -q Microsoft /proc/version; then
  echo 'this is windows'
fi

if has rg; then
  export FZF_DEFAULT_COMMAND="rg --hidden --files --glob !.git"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
export FZF_DEFAULT_OPTS='
  --info=inline
  --bind ctrl-q:toggle-all
  --bind ctrl-j:preview-down
  --bind ctrl-k:preview-up
  --bind ctrl-d:preview-page-down
  --bind ctrl-u:preview-page-up
  --pointer=‚ûú
  --ellipsis=‚Ä¶
  --marker=‚úì
  --bind ctrl-'"\\\\"':toggle-preview
  --bind '"'"'alt-q:change-preview-window(right,70%|down,40%,border-horizontal|hidden|right)'"'"'
  --bind '"'"'alt-Q:change-preview-window(right|hidden|down,40%,border-horizontal|right,70%)'"'"'
  --bind ctrl-y:preview-up
  --bind ctrl-r:prev-history
  --bind ctrl-t:next-history
  --bind ctrl-p:up
  --bind ctrl-n:down
  '
# select previous       | ctrl-p | :-( not show previous history search
# carot to end          | ctrl-e | :-( not scroll down
# carot to start        | ctrl-a |
# preview down          | ctrl-j | :-( not select next
# preview page down     | ctrl-d | :-( not delete char
# preview page up       | ctrl-u |
# preview up            | ctrl-k | :-( not kill line :-( not select previous
# rotate preview layout | alt-Q  |
# rotate preview layout | alt-q  |
# toggle all items      | alt-a  |
# toggle all items      | ctrl-q |
# toggle preview        | ctrl-/ | ??? doesn't work in kitty/nvim
# toggle preview        | ctrl-\ |

echo -ne üê∂
if has direnv; then
  eval "$(direnv hook zsh)"
fi

# clock 2
echo -ne 'üïë'

if [[ "$TERM" = "xterm-kitty" ]]; then
  alias icat="kitty +kitten icat"
  alias hg="kitty +kitten hyperlinked_grep "
  compdef hg=rg
  # https://www.baeldung.com/linux/background-process-get-exit-code
  notify() {
    local errcode="$?"
    local title
    local prev_cmd="$(tail -n 1 $HISTFILE | sed 's/^[^;]*;//')"
    if [[ "$errcode" = "0" ]]; then
      title="${1:-‚úÖ $prev_cmd}"
    else
      title="${1:-‚ùå $prev_cmd}"
    fi
    local body="$2"
    printf '\x1b]99;i=1:d=0;'"$title"'\x1b\\'
    printf '\x1b]99;i=1:d=1:p=body;'"$body"'\x1b\\'
  }
  alias n=notify
  rk_mark() {
    kitty @ --password 'wow such secure' create-marker --match all text 3 "$1"
  }
  rk_unmark() {
    kitty @ --password 'wow such secure' remove-marker --match all
  }
  echo -n üêà
fi
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
zstyle ':completion:*:*:make:*' tag-order 'targets'

# clock 4
# echo -ne '\b\b'
echo -ne üïì

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line
# https://unix.stackexchange.com/a/34251

# clear line
# echo -e "\033[1K"
clear
